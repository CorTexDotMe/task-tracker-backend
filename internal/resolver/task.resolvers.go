package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"
	"fmt"
	"strconv"
	"task-tracker-backend/internal/graph"
	"task-tracker-backend/internal/model"
)

// CreateTask is the resolver for the createTask field.
func (r *mutationResolver) CreateTask(ctx context.Context, input model.NewTask) (*model.Task, error) {
	//TODO get user from context
	return r.taskRepository.SaveFromInput(input, &model.User{})
}

// UpdateTask is the resolver for the updateTask field.
func (r *mutationResolver) UpdateTask(ctx context.Context, id string, title *string, description *string, status *string, dueDate *string) (*model.Task, error) {
	panic(fmt.Errorf("not implemented: UpdateTask - updateTask"))
}

// DeleteTask is the resolver for the deleteTask field.
func (r *mutationResolver) DeleteTask(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteTask - deleteTask"))
}

// TasksAll is the resolver for the tasksAll field.
func (r *queryResolver) TasksAll(ctx context.Context) ([]*model.Task, error) {
	panic(fmt.Errorf("not implemented: TasksAll - tasksAll"))
}

// Tasks is the resolver for the tasks field.
func (r *queryResolver) Tasks(ctx context.Context, userID string) ([]*model.Task, error) {
	panic(fmt.Errorf("not implemented: Tasks - tasks"))
}

// Task is the resolver for the task field.
func (r *queryResolver) Task(ctx context.Context, id string) (*model.Task, error) {
	panic(fmt.Errorf("not implemented: Task - task"))
}

// ID is the resolver for the id field.
func (r *taskResolver) ID(ctx context.Context, obj *model.Task) (string, error) {
	return strconv.FormatUint(uint64(obj.ID), 10), nil
}

// DateCreated is the resolver for the dateCreated field.
func (r *taskResolver) DateCreated(ctx context.Context, obj *model.Task) (string, error) {
	return obj.CreatedAt.Format("01/01/2000"), nil
}

// DueDate is the resolver for the dueDate field.
func (r *taskResolver) DueDate(ctx context.Context, obj *model.Task) (*string, error) {
	var date *string
	if obj.DueDate != nil {
		*date = obj.DueDate.Format("01/01/2000")
	}
	return date, nil
}

// User is the resolver for the user field.
func (r *taskResolver) User(ctx context.Context, obj *model.Task) (*model.User, error) {
	r.taskRepository.LoadUser(obj)
	return obj.User, nil
}

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

// Task returns graph.TaskResolver implementation.
func (r *Resolver) Task() graph.TaskResolver { return &taskResolver{r} }

type queryResolver struct{ *Resolver }
type taskResolver struct{ *Resolver }
