package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"
	"strconv"
	"task-tracker-backend/internal/graph"
	"task-tracker-backend/internal/model"
	"task-tracker-backend/internal/utils"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	return r.userRepository.SaveFromInput(input)
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, username *string, password *string) (*model.User, error) {
	idUint, err := strconv.ParseUint(id, 10, 32)
	utils.HandleError(err)

	updateUser := &model.User{}
	updateUser.ID = uint(idUint)

	if username != nil && *username != "" {
		updateUser.Name = *username
	}

	if password != nil && *password != "" {
		updateUser.Password = *password
	}

	r.userRepository.Updates(updateUser)
	return r.userRepository.Get(uint(idUint))
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	idUint, err := strconv.ParseUint(id, 10, 32)
	utils.HandleError(err)

	r.userRepository.Remove(uint(idUint))
	return true, nil
}

// UsersAll is the resolver for the usersAll field.
func (r *queryResolver) UsersAll(ctx context.Context) ([]*model.User, error) {
	return r.userRepository.GetAll()
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	idUint, err := strconv.ParseUint(id, 10, 32)
	utils.HandleError(err)

	return r.userRepository.Get(uint(idUint))
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *model.User) (string, error) {
	return strconv.FormatUint(uint64(obj.ID), 10), nil
}

// User returns graph.UserResolver implementation.
func (r *Resolver) User() graph.UserResolver { return &userResolver{r} }

type userResolver struct{ *Resolver }
